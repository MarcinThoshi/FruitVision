pip install ultralytics opencv-python numpy matplotlib scikit-learn torch torchvision torchaudio 

import cv2
import tkinter as tk
from tkinter import filedialog, ttk, messagebox
from PIL import Image, ImageTk
from ultralytics import YOLO
import numpy as np
from sklearn.metrics import precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import threading
import torch
from collections import defaultdict
from PIL import Image, ImageTk
import csv
import os
import datetime
import time

# Device Check
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Training on: {device}")

# Directory for storing logs
log_file_path = "detection_logs.csv"

# Ensure log file exists
if not os.path.exists(log_file_path):
    with open(log_file_path, "w", newline="") as log_file:
        writer = csv.writer(log_file)
        writer.writerow(["Timestamp", "File Type", "File Path", "Detected Fruits"])

# Load Trained YOLO Model
trained_model = YOLO("D:/Computer Vision/runs/detect/fruit_vision/weights/best.pt")

# GUI Setup
root = tk.Tk()
root.title("FRUITVISION")
root.geometry("1600x900")  # Increased window size to accommodate all components
root.configure(bg="#2b2b2b")

# Title Label
title_label = tk.Label(
    root, text="FRUITVISION", font=("Arial", 40, "bold"), fg="white", bg="#2b2b2b"
)
title_label.pack(pady=10)

# Instruction Label
instruction_label = tk.Label(
    root,
    text="Upload an image, video, or use the webcam for real-time detection.\nPress 'Q' to stop the video or webcam.",
    font=("Arial", 16),
    fg="white",
    bg="#2b2b2b",
)
instruction_label.pack(pady=10)

# Maximum Detected Fruits Label
max_fruit_label = tk.Label(
    root,
    text="Maximum Detected Fruits: None",
    font=("Arial", 18, "bold"),
    fg="white",
    bg="#2b2b2b",
)
max_fruit_label.pack(pady=10)

# Scrollable Counter Panel
counter_frame = tk.Frame(root, bg="#2b2b2b")
counter_frame.pack(pady=20, padx=20, fill="both", expand=True)

canvas = tk.Canvas(counter_frame, bg="#2b2b2b", highlightthickness=0)
scrollbar = ttk.Scrollbar(counter_frame, orient="vertical", command=canvas.yview)
scrollable_counter = tk.Frame(canvas, bg="#2b2b2b")

scrollable_counter.bind(
    "<Configure>",
    lambda e: canvas.configure(scrollregion=canvas.bbox("all")),
)

canvas.create_window((0, 0), window=scrollable_counter, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

canvas.pack(side="left", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")

# Buttons Panel
button_frame = tk.Frame(root, bg="#2b2b2b")
button_frame.pack(fill="x", pady=10)

# Fruit Classes and Tracking
fruit_classes = [
    "apple", "banana", "dragon fruit", "guava",
    "orange", "pear", "pineapple", "sugar apple"
]
max_counts = defaultdict(int)
fruit_widgets = {}

# Confidence Slider
confidence_slider_label = tk.Label(
    root, text="Confidence Threshold", font=("Arial", 16), fg="white", bg="#2b2b2b"
)
confidence_slider_label.pack(pady=5)

confidence_slider = tk.Scale(
    root,
    from_=0.1,
    to=1.0,
    resolution=0.01,
    orient="horizontal",
    length=500,
    sliderlength=20,
    width=15,
    bg="#2b2b2b",
    fg="white",
    activebackground="#007ACC",
)
confidence_slider.set(0.25)  # Default confidence threshold
confidence_slider.pack(pady=10)

# Class Selection (Filter results by specific classes)
class_selection_label = tk.Label(
    root, text="Fruits to be Tracked", font=("Arial", 16), fg="white", bg="#2b2b2b"
)
class_selection_label.pack(pady=5)

class_selection_listbox = tk.Listbox(
    root, 
    selectmode=tk.MULTIPLE,  # Allow multiple selections
    height=6,  # Adjust height as needed
    font=("Arial", 14),
    bg="#333333",
    fg="white",
    selectbackground="#007ACC"
)
for fruit in fruit_classes:
    class_selection_listbox.insert(tk.END, fruit)

class_selection_listbox.pack(pady=10)

# Helper Functions
def reset_fruit_counter():
    """Reset the GUI fruit counter and tracking."""
    global fruit_widgets, max_counts
    fruit_widgets.clear()
    max_counts.clear()

    for widget in scrollable_counter.winfo_children():
        widget.destroy()

    max_fruit_label.config(text="Maximum Detected Fruits: None")

def update_fruit_counter(fruit_counts):
    """Update the GUI with fruit counts dynamically."""
    for fruit, count in fruit_counts.items():
        if fruit not in fruit_widgets:
            fruit_frame = tk.Frame(scrollable_counter, bg="#2b2b2b", pady=5)
            fruit_frame.pack(fill="x", padx=10)

            fruit_label = tk.Label(
                fruit_frame,
                text=fruit,
                font=("Arial", 14, "bold"),
                fg="white",
                bg="#2b2b2b",
                anchor="w",
            )
            fruit_label.pack(side="left", padx=10)

            progress = ttk.Progressbar(
                fruit_frame,
                orient="horizontal",
                mode="determinate",
                length=200,
            )
            progress.pack(side="left", padx=10)

            count_label = tk.Label(
                fruit_frame,
                text=f"Count: {count}",
                font=("Arial", 12),
                fg="white",
                bg="#2b2b2b",
            )
            count_label.pack(side="left", padx=10)

            fruit_widgets[fruit] = {"progress": progress, "count_label": count_label}

        fruit_widgets[fruit]["progress"]["value"] = count
        fruit_widgets[fruit]["count_label"].config(text=f"Count: {count}")
        max_counts[fruit] = max(max_counts[fruit], count)

    max_fruit_label.config(
        text=f"Maximum Detected Fruits: {', '.join([f'{fruit}: {count}' for fruit, count in max_counts.items()])}"
    )

def log_detection(file_type, file_path, detected_fruits):
    """Log file detections."""
    with open(log_file_path, "a", newline="") as log_file:
        writer = csv.writer(log_file)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        writer.writerow([timestamp, file_type, file_path, detected_fruits])

def view_logs():
    """View detection logs."""
    if not os.path.exists(log_file_path):
        messagebox.showinfo("Logs", "No logs available.")
        return

    with open(log_file_path, "r") as log_file:
        log_data = log_file.readlines()

    if len(log_data) <= 1:
        messagebox.showinfo("Logs", "No logs available.")
        return

    log_window = tk.Toplevel(root)
    log_window.title("Detection Logs")
    log_window.geometry("800x600")

    log_text = tk.Text(log_window, wrap="word")
    log_text.pack(expand=True, fill="both")

    for line in log_data:
        log_text.insert("end", line)

    # Clear Logs Button
    def clear_logs():
        with open(log_file_path, "w", newline="") as log_file:
            writer = csv.writer(log_file)
            writer.writerow(["Timestamp", "File Type", "File Path", "Detected Fruits"])
        log_text.delete(1.0, "end")
        messagebox.showinfo("Logs", "Logs have been cleared.")

    clear_logs_button = tk.Button(
        log_window, text="Clear Logs", font=("Arial", 14), bg="#ff0000", fg="white", command=clear_logs
    )
    clear_logs_button.pack(pady=10)

def process_image(file_path):
    """Process and display an image."""
    reset_fruit_counter()
    frame = cv2.imread(file_path)
    confidence_threshold = confidence_slider.get()
    results = trained_model.predict(frame, imgsz=640, iou=0.7, conf=confidence_threshold)
    predictions = results[0].boxes

    fruit_counts = defaultdict(int)
    selected_fruits = [class_selection_listbox.get(i) for i in class_selection_listbox.curselection()]

    for box in predictions:
        class_id = int(box.cls)
        fruit_name = fruit_classes[class_id]
        if not selected_fruits or fruit_name in selected_fruits:
            fruit_counts[fruit_name] += 1

    update_fruit_counter(fruit_counts)

    detected_fruits = ", ".join([f"{fruit}: {count}" for fruit, count in fruit_counts.items()])
    log_detection("Image", file_path, detected_fruits)

    # Annotate and display the frame
    annotated_frame = results[0].plot()
    
    # Convert BGR to RGB
    annotated_frame_rgb = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
    
    # Convert to ImageTk format
    annotated_image = ImageTk.PhotoImage(image=Image.fromarray(annotated_frame_rgb))
    
    # Create a new window for the result
    result_window = tk.Toplevel(root)
    result_window.title("Detection Result")
    result_label = tk.Label(result_window, image=annotated_image)
    result_label.image = annotated_image  # Keep a reference to avoid garbage collection
    result_label.pack()

def process_video_or_webcam(source):
    """Process video or webcam with FPS and latency calculations."""
    reset_fruit_counter()
    cap = cv2.VideoCapture(source)

    max_fruit_counts = defaultdict(int)
    fps_label = tk.Label(
        root, text="FPS: Calculating...", font=("Arial", 16), fg="white", bg="#2b2b2b"
    )
    fps_label.pack(pady=5)

    latency_label = tk.Label(
        root, text="Latency: Calculating...", font=("Arial", 16), fg="white", bg="#2b2b2b"
    )
    latency_label.pack(pady=5)

    prev_time = 0  # Time of previous frame
    total_frames = 0

    while cap.isOpened():
        start_time = time.time()  # Start measuring latency
        ret, frame = cap.read()
        if not ret:
            break

        confidence_threshold = confidence_slider.get()
        results = trained_model.predict(frame, imgsz=640, iou=0.7, conf=confidence_threshold)
        predictions = results[0].boxes

        frame_fruit_counts = defaultdict(int)
        selected_fruits = [class_selection_listbox.get(i) for i in class_selection_listbox.curselection()]

        for box in predictions:
            class_id = int(box.cls)
            fruit_name = fruit_classes[class_id]
            if not selected_fruits or fruit_name in selected_fruits:
                frame_fruit_counts[fruit_name] += 1

        update_fruit_counter(frame_fruit_counts)

        for fruit, count in frame_fruit_counts.items():
            max_fruit_counts[fruit] = max(max_fruit_counts[fruit], count)

        annotated_frame = results[0].plot()

        # Calculate and update FPS
        curr_time = time.time()
        fps = 1 / (curr_time - prev_time) if prev_time else 0
        prev_time = curr_time
        fps_label.config(text=f"FPS: {fps:.2f}")

        # Calculate and update latency
        latency = time.time() - start_time
        latency_label.config(text=f"Latency: {latency:.2f} seconds")

        cv2.imshow("Detection", annotated_frame)
        total_frames += 1

        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

    detected_fruits = ", ".join([f"{fruit}: {count}" for fruit, count in max_fruit_counts.items()])
    log_detection("Video/Webcam", source, detected_fruits)

    cap.release()
    cv2.destroyAllWindows()

def upload_images():
    file_paths = filedialog.askopenfilenames(filetypes=[("Image Files", "*.jpg;*.jpeg;*.png")])
    for file_path in file_paths:
        log_detection("Image", file_path, "N/A")  # Initial log entry
        process_image(file_path)

def upload_video():
    file_path = filedialog.askopenfilename(filetypes=[("Video Files", "*.mp4;*.avi;*.mov")])
    log_detection("Video", file_path, "N/A")  # Initial log entry
    process_video_or_webcam(file_path)

def use_webcam():
    log_detection("Webcam", "Real-time Webcam", "N/A")  # Initial log entry
    process_video_or_webcam(0)

# Buttons for uploading images, videos, and webcam usage
upload_images_button = tk.Button(
    button_frame, text="Upload Image", font=("Arial", 18), command=upload_images
)
upload_images_button.pack(side="left", padx=20)

upload_video_button = tk.Button(
    button_frame, text="Upload Video", font=("Arial", 18), command=upload_video
)
upload_video_button.pack(side="left", padx=20)

use_webcam_button = tk.Button(
    button_frame, text="Use Webcam", font=("Arial", 18), command=use_webcam
)
use_webcam_button.pack(side="left", padx=20)

# View logs button
view_logs_button = tk.Button(
    button_frame, text="View Logs", font=("Arial", 18), command=view_logs
)
view_logs_button.pack(side="left", padx=20)


# Start GUI
root.mainloop()


%matplotlib inline
import matplotlib.pyplot as plt

# Run validation and gather metrics
results = trained_model.val()

# Retrieve metrics
mean_ap_50 = results.box.map50  # Mean AP@0.5
mean_ap_5095 = results.box.map  # Mean AP@0.5:0.95
precision = results.box.mp  # Mean Precision
recall = results.box.mr  # Mean Recall
f1_score = results.box.f1  # F1 Score for each class

# Metrics for individual classes
maps = results.box.maps  # mAP values for each class
precisions = results.box.p  # Precision for each class
recalls = results.box.r  # Recall for each class
ap_50s = results.box.ap50  # AP@0.5 for each class (direct access)
ap_5095s = results.box.ap  # AP@0.5:0.95 for each class (direct access)

# Class names (assume you already have fruit_classes)
fruit_classes = ['apple', 'banana', 'dragon fruit', 'guava', 'orange', 'pear', 'pineapple', 'sugar apple']

# Print overall metrics
print(f"mAP@0.5: {mean_ap_50:.4f}")
print(f"mAP@0.5:0.95: {mean_ap_5095:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score (Mean): {f1_score.mean():.4f}\n")  # Mean F1 Score

# Print per-class metrics
print("Per-Class Metrics:")
for idx, name in enumerate(fruit_classes):
    print(f"{name} - AP@0.5: {ap_50s[idx]:.4f}, AP@0.5:0.95: {ap_5095s[idx]:.4f}, Precision: {precisions[idx]:.4f}, Recall: {recalls[idx]:.4f}, F1 Score: {f1_score[idx]:.4f}")

# Visualization
fig, axs = plt.subplots(2, 2, figsize=(12, 10))
fig.suptitle("YOLOv8 Evaluation Metrics by Class", fontsize=16)

# Precision
axs[0, 0].bar(fruit_classes, precisions, color='skyblue', alpha=0.7)
axs[0, 0].set_title("Precision by Class")
axs[0, 0].set_ylabel("Precision")
axs[0, 0].set_xticks(range(len(fruit_classes)))
axs[0, 0].set_xticklabels(fruit_classes, rotation=45, ha='right')

# Recall
axs[0, 1].bar(fruit_classes, recalls, color='lightgreen', alpha=0.7)
axs[0, 1].set_title("Recall by Class")
axs[0, 1].set_ylabel("Recall")
axs[0, 1].set_xticks(range(len(fruit_classes)))
axs[0, 1].set_xticklabels(fruit_classes, rotation=45, ha='right')

# AP@0.5
axs[1, 0].bar(fruit_classes, ap_50s, color='salmon', alpha=0.7)
axs[1, 0].set_title("AP@0.5 by Class")
axs[1, 0].set_ylabel("AP@0.5")
axs[1, 0].set_xticks(range(len(fruit_classes)))
axs[1, 0].set_xticklabels(fruit_classes, rotation=45, ha='right')

# AP@0.5:0.95
axs[1, 1].bar(fruit_classes, ap_5095s, color='gold', alpha=0.7)
axs[1, 1].set_title("AP@0.5:0.95 by Class")
axs[1, 1].set_ylabel("AP@0.5:0.95")
axs[1, 1].set_xticks(range(len(fruit_classes)))
axs[1, 1].set_xticklabels(fruit_classes, rotation=45, ha='right')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show

